---
- name: Reuse common code
  include_tasks: "{{ playbook_dir }}/../common/config_apply.yml"

- name: Create deployment files for certssetup and pvc
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/{{ item }}.j2"
    dest: "{{ pjrun }}/{{ item }}.yaml"
  with_items:
    - pvc
    - certssetup
    - cli-k8s
    - chainep
    - namespace

# Create the k8s services so that node addresses become available
- name: Create k8s service deployment files
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/fabric-services.j2"
    dest: "{{ pjrun }}/fabric-services.yml"

- name: Create namespace
  command: >-
    kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/namespace.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  when: namespace != 'default'
  tags: "fabricup"

- name: Start fabric services
  command: >-
    kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/fabric-services.yml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "fabricup"

# Wait for metrics daemon set to be ready
- name: Wait for metric daemon set to be ready
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    get ds nodemetricds -o
    jsonpath='{ .status.desiredNumberScheduled }{"="}{ .status.numberReady}'
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: dsstatus
  until: dsstatus.stdout.split('=')[0] == dsstatus.stdout.split('=')[1]
  when: fabric.metrics is defined and fabric.metrics
  retries: 50
  delay: 5

- name: Get metric daemon pod names
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    get pods -l name=nodemetricds -o
    jsonpath='{range .items[*]}["{.metadata.name}","{.spec.nodeName}"],{end}'
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  when: fabric.metrics is defined and fabric.metrics
  register: dsstatus

- set_fact:
    dsnodes: >-
      {{ '[' + dsstatus.stdout[0:(dsstatus.stdout|length|int-1)] + ']' }}
  when: fabric.metrics is defined and fabric.metrics

- name: Label daemon set pod
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    label pods {{ item[0] }} nodeName={{ item[1]|replace('.', '-') }}
    --overwrite
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  when: fabric.metrics is defined and fabric.metrics
  with_list: "{{ dsnodes }}"

- include_tasks: "{{ playbook_dir }}/../common/publicports.yml"
  when: fabric.k8s.exposeserviceport == True

- name: Initialize profileNode
  set_fact:
    profilenodes: []

- name: Add orderer profile nodes
  set_fact:
    profilenodes: "{{ allorderers|map(attribute='name')|list }}"
  when: >-
    fabric.orderersettings is defined and
    fabric.orderersettings.ordererenv is defined and
    fabric.orderersettings.ordererenv.ORDERER_GENERAL_PROFILE_ENABLED is defined and
    fabric.orderersettings.ordererenv.ORDERER_GENERAL_PROFILE_ENABLED

- name: Add peer profile nodes
  set_fact:
    profilenodes: "{{ profilenodes + (allpeers|map(attribute='name')|list) }}"
  when: >-
    fabric.peersettings is defined and
    fabric.peersettings.CORE_PEER_PROFILE_ENABLED is defined and
    fabric.peersettings.CORE_PEER_PROFILE_ENABLED

- name: Create profile configuration file
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/bndsamplerconfig.j2"
    dest: "{{ fabricworkdir }}/keyfiles/bndsamplerconfig.json"
  when: profilenodes | length > 0

- include_tasks: "{{ playbook_dir }}/../common/publicports.yml"
  when: fabric.k8s.exposeserviceport == True

- name: Create peer org member string
  set_fact:
    orgmembers: >-
      {{ peerorgs|map('regex_replace','(.*)',"'\g<1>.member'")|list|join(',') }}

- include_tasks: "{{ playbook_dir }}/certsetup/tasks/apply.yml"
  when: fabric.generate_certs|default(true) == true

- name: Create peer channel command script
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/dochannel.j2"
    dest: "{{ fabricworkdir }}/keyfiles/dochannel.sh"
    mode: "u=rx,g=rx"
  when: (allorderers | length > 0) and (allpeers | length > 0)

- name: Create persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/pvc.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createpvc"

- name: Query PVC status
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    get -o=custom-columns=STATUS:.status.phase
    pvc fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: pvcstatus
  until: pvcstatus.stdout.find("Bound") >= 0
  retries: 50
  delay: 3
  tags: "querypvc"

- name: Create certs volume initialization pod
  command: >-
    kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/certssetup.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createcertspod"
  when: fabric.generate_certs|default(true) == true

- name: Query initialization container status
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    get -o=custom-columns=STATUS:.status.phase
    pod fabriccertspod
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: pvcstatus
  until: pvcstatus.stdout.find("Running") >= 0
  retries: 50
  delay: 3
  tags: "querypvc"
  when: fabric.generate_certs|default(true) == true

- name: Check the status of secret for pulling images
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    get secrets -o=custom-columns=NAME:.metadata.name
    regcred
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  ignore_errors: yes
  no_log: True
  register: "secretstatus"
  when: >
    fabric.baseimage_tag | length > 0 and
    fabric.repo.username | default("") | length > 0 and
    fabric.repo.password | default("") | length > 0

- name: Create secret for image
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    create secret docker-registry regcred --docker-server={{ fabric.repo.url }}
    --docker-username={{ fabric.repo.username }} --docker-password={{ fabric.repo.password }}
    --docker-email=email@email.com
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: "secretcreate"
  when: >
    fabric.baseimage_tag | length > 0 and
    fabric.repo.username | default("") | length > 0 and
    fabric.repo.password | default("") | length > 0 and
    secretstatus.rc != 0

- name: Clean up the Persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    exec fabriccertspod -c task-pv-container
    -- rm -rf /fabriccerts/*
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "cleancerts"
  when: fabric.generate_certs|default(true) == true

- name: Copy certs onto the persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    cp {{ item }} fabriccertspod:/fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items:
    - "{{ fabricworkdir }}/certs.tgz"
#    - "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/firstcode.go"
  tags: "placecerts"
  when: fabric.generate_certs|default(true) == true

- name: Copy channel operation script onto the persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    cp {{ item }} fabriccertspod:/fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items:
    - "{{ fabricworkdir }}/keyfiles/dochannel.sh"
  when: (allorderers | length > 0) and (allpeers | length > 0) and fabric.generate_certs|default(true) == true
  tags: "placecerts"

- name: Create directory for profiling configuration file on persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig exec fabriccertspod -c task-pv-container
    -- mkdir -p /fabriccerts/bndprofiles/config
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  when: profilenodes | length > 0
  tags: "profiling"

- name: Copy profiling configuration file onto persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig cp {{ item }}
    fabriccertspod:/fabriccerts/bndprofiles/config/config.json
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items:
    - "{{ fabricworkdir }}/keyfiles/bndsamplerconfig.json"
  when: profilenodes | length > 0
  tags: "profiling"

- name: Untar certs.tgz in the Persistent volume
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    exec fabriccertspod -c task-pv-container
    -- tar -C /fabriccerts -xzvf /fabriccerts/certs.tgz
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "untarcerts"
  when: fabric.generate_certs|default(true) == true

- name: Change certs permissions
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    exec fabriccertspod -c task-pv-container
    -- chmod -R o+rw /fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "changecertspermission"
  when: fabric.generate_certs|default(true) == true

- name: Removing the certs pod
  command: >-
    kubectl --kubeconfig kubeconfig delete -f {{ pjrun }}/certssetup.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "deletecertspod"
  async: 120
  poll: 0
  when: fabric.generate_certs|default(true) == true

- name: Deploy chaincode container endpoint daemon set
  command: >-
    kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/chainep.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "doendpointdaemonset"

- name: Set orderer profile flag
  set_fact:
    ordererprofile: True
  when: >-
    fabric.orderersettings is defined and
    fabric.orderersettings.ordererenv is defined and
    fabric.orderersettings.ordererenv.ORDERER_GENERAL_PROFILE_ENABLED is defined and
    fabric.orderersettings.ordererenv.ORDERER_GENERAL_PROFILE_ENABLED == True

- name: Set peer profile flag
  set_fact:
    peerprofile: True
  when: >-
    fabric.peersettings is defined and
    fabric.peersettings.CORE_PEER_PROFILE_ENABLED is defined and
    fabric.peersettings.CORE_PEER_PROFILE_ENABLED is defined and
    fabric.peersettings.CORE_PEER_PROFILE_ENABLED == True

- name: Create k8s deployment files
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/fabric-pod.j2"
    dest: "{{ pjrun }}/fabric-pod.yml"

- name: Start fabric pods
  command: "kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/fabric-pod.yml"
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "fabricup"

- name: Create deployment files for sdk and services
  include_tasks: "{{ playbook_dir }}/../deploy_k8s/services/tasks/apply.yml"   

- name: Wait for all peer pods to be ready
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    -o=custom-columns=STATUS:.status.phase
    get pods -l type=peer --no-headers --field-selector=status.phase=Running
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: podstatus
  until: podstatus.stdout_lines | length == allpeers | length
  retries: 50
  delay: 3

- name: Get number of nodes
  command: >-
    kubectl --kubeconfig kubeconfig get nodes --no-headers
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: numberofnodes

- name: Get number of master nodes
  command: >-
    kubectl --kubeconfig kubeconfig get nodes --selector=node-role.kubernetes.io/master --no-headers
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: numberofmaster


- name: Start channel operations
  command: "kubectl --kubeconfig kubeconfig apply -f {{ pjrun }}/cli-k8s.yaml"
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "channeloperation"
  when: (allorderers | length > 0) and (allpeers | length > 0)

- name: Wait for channel operation pod to complete
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    -o=custom-columns=STATUS:.status.phase
    get pods -l k8s-app=fabriccli --no-headers --field-selector=status.phase=Succeeded
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: podstatus
  until: podstatus.stdout_lines | length == 1
  when: (allorderers | length > 0) and (allpeers | length > 0)
  retries: 50
  delay: 5
  tags: "channeloperation"

- name: Wait for docker endpoint pods to be ready
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    -o=custom-columns=STATUS:.status.phase
    get pods -l name=dind --no-headers --field-selector=status.phase=Running
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: podstatus
  until: (podstatus.stdout_lines|length) == ((numberofnodes.stdout_lines|length) - (numberofmaster.stdout_lines|length))
  when: (allorderers | length > 0) and (allpeers | length > 0)
  retries: 50
  delay: 3

- name: Get all the endpoint pods
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    -o=custom-columns=NAME:.metadata.name
    get pods -l name=dind --no-headers
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: dindpods
  tags: "downloadccenv"

#docker pull {{ fabric.repo.url }}fabric-ccenv:{{ fabric.baseimage_tag }}
- name: Download chaincode container image
  command: >-
    kubectl --kubeconfig kubeconfig --namespace {{ namespace }}
    exec {{ item }} --
    docker load -i /hyperledger_fabric-ccenv.{{ fabric.ccenvimage_tag }}.tar.gz
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ dindpods.stdout_lines }}"
  when: allpeers | length > 0
  tags: "downloadccenv"

