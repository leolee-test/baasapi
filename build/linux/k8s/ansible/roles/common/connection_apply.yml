---
- name: Setup and initialize variables
  set_fact:
    fabricworkdir: "{{ pjroot }}/vars/namespaces/{{ env }}/fabric"
    fabricpath: "{{ pjroot }}/vars/namespaces/{{ env }}"
    pjrun: "{{ pjroot }}/vars/namespaces/{{ env }}/run"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    cas: "{{ [] }}"
    kafkas: "{{ [] }}"
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"
    zookeeperls: "{{ [] }}"
    zookeeperls1: "{{ [] }}"
    kafkals: "{{ [] }}"
    kafkals1: "{{ [] }}"
    peerls: "{{ [] }}"
    ordererls: "{{ [] }}"
    cals: "{{ [] }}"
    allpeers: "{{ [] }}"
    allcas: "{{ [] }}"
    allorderers: "{{ [] }}"
    clipeer: "{}"
    cliorderer: "{}"
    tls: "{}"
    mutualtls: "{}"
    allcerts: "{{ [] }}"
    networkid: "{{ env.split('-')[-1] }}"
    tag: "{{ fabric.baseimage_tag.split('-') }}"

- name: Set deployment namespace
  set_fact:
    namespace: "{{ fabric.namespace | default('default') | lower }}"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    zookeeperls1: "{{ zookeeperls1 | default([]) + item.value.zookeepers | default([]) }}"
    kafkals1: "{{ kafkals1 | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"


- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item.split('.')[0]+networkid+'-'+item.split('.')[-1] }] }}
  with_items: "{{ cals }}"
  #- name: Display all variables/facts known for a host
  #debug:
  #  var: hostvars
  #tags: debug_info

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1].split('.')[0]+networkid+'-'+item.split('@')[1].split('.')[-1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"
#- name: Display all variables/facts known for a host
#  debug:
#    var: zookeeperls 
#  tags: debug_info
#- debug:
#    var: kafkals

- name: Get all orderer object list
  set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item.split('.')[0]+networkid+'-'+item.split('.')[-1] }] }}
  with_items: "{{ ordererls }}"

- name: Get ca, peer and orderer orgs
  set_fact:
    caorgs: "{{ allcas | default([]) | map(attribute='org') | list  | unique | sort }}"
    peerorgs: "{{ allpeers | default([]) | map(attribute='org') | list  | unique | sort }}"
    ordererorgs: "{{ allorderers | default([]) | map(attribute='org') | list  | unique | sort }}"

- name: Create all orgs list
  set_fact:
    allorgs: "{{ (caorgs + peerorgs + ordererorgs) | sort | unique }}"

- name: TLS
  set_fact:
    tls: "{{ fabric.tls | default('true') }}"
    mutualtls: "false"
  when: fabric.tls != "client"

- name: Mutual tls
  set_fact:
    mutualtls: "true"
    tls: "true"
  when: fabric.tls == "client"

- name: Initialize sets
  set_fact:
    orderer_rootca: "{{ [] }}"
    peerorg_rootca: "{{ [] }}"
    peers_rootca: "{{ [] }}"

- name: Create peerorg rootca list
  set_fact:
    peerorg_rootca: |
      {{ peerorg_rootca | default([]) | replace('+', ',') }}  +  [ '/etc/hyperledger/fabric/artifacts/keyfiles/{{ item }}/ca/ca.{{ item }}-cert.pem' ]
  with_items: "{{ peerorgs }}"
  when: fabric.tls != false

- name: Create peers rootca list
  set_fact:
    peers_rootca: |
      {{ peers_rootca | default([]) | replace('+', ',') }}  +  [ '/etc/hyperledger/fabric/artifacts/keyfiles/{{ item }}/tlsca/tlsca.{{ item }}-cert.pem' ]
  with_items: "{{ peerorgs }}"
  when: fabric.tls != false

- name: Create all org admin certs list
  set_fact:
    allcerts: >-
      {{ allcerts | default([]) +
      [ '/etc/hyperledger/fabric/artifacts/keyfiles/'+item+'/users/Admin@'+item+'/tls/client.crt' ] +
      [ '/etc/hyperledger/fabric/artifacts/keyfiles/'+item+'/ca/ca.'+item+'-cert.pem' ] +
      [ '/etc/hyperledger/fabric/artifacts/keyfiles/'+item+'/tlsca/tlsca.'+item+'-cert.pem' ] }}
  with_items: "{{ allorgs }}"
  when: fabric.tls != false

#- debug:
#    var: allcerts

- name: Create orderers rootca list
  set_fact:
    orderer_rootca: |
      {{ orderer_rootca | default([]) | replace('+', ',') }} + [ '/etc/hyperledger/fabric/artifacts/keyfiles/{{ item}}/tlsca/tlsca.{{ item }}-cert.pem' ]
  with_items: "{{ ordererorgs }}"
  when: fabric.tls != false

- name: Make orderer rootca list unique
  set_fact:
    orderer_rootca: "{{ orderer_rootca | unique }}"
  when: fabric.tls != false

- name: Joining the orderer rootca list and peerorg rootca list
  set_fact:
    rootca: "{{ peerorg_rootca }} + {{ peers_rootca }} + {{ orderer_rootca }}"
  when: fabric.tls != false

- name: Make rootca list unique
  set_fact:
    rootca: "{{ allcerts | unique }}"
  when: fabric.tls != false

#- name: Query node names
#  command: >-
#    kubectl --kubeconfig kubeconfig get nodes
#    -o=jsonpath={.items[*].metadata.name}
#  register: nodenames
#  args:
#    chdir: "{{ playbook_dir }}/../../vars/"

#- set_fact:
#    k8snodes: "{{ nodenames.stdout.split(' ') }}"
#- debug:
#    var: hostvars  
